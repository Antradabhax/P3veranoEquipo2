import java.util.*;

public class Clase15_Act4 {
    public static void main(String[] args) {
        System.out.println("------------");
        System.out.println("Actividad 3:");
        // Ejemplo de montos en las sucursales (positivos = cobros, negativos = pagos)
        List<Integer> sucursales = Arrays.asList(+500, -100, +200, -50, +100, -300, +400);

        // Dinero inicial del cobrador
        int dineroInicial = 100;

        // Llamamos al método del algoritmo
        List<Integer> recorrido = Actividad3.planificarRecorrido(sucursales, dineroInicial);

        // Mostramos el resultado
        System.out.println("Recorrido planificado: " + recorrido);
        System.out.println("Número de sucursales visitadas: " + recorrido.size());

        double saldoInicial = 10.0;
        List<Nodo> nodos = new ArrayList<>();

        // Agregamos nodos de ejemplo
        nodos.add(new Nodo(5.0, 2.0));   // Cobro
        nodos.add(new Nodo(-3.0, 1.5));  // Pago
        nodos.add(new Nodo(4.0, 3.0));   // Cobro
        nodos.add(new Nodo(-2.0, 2.0));  // Pago

        double saldoFinal = Actividad4.calcularMaximoSaldoDolares(saldoInicial, nodos);
        System.out.println("------------");
        System.out.println("Actividad 4:");
        System.out.println("Saldo final en dólares: " + saldoFinal);
        System.out.println("------------");
    }
    public static double calcularMaximoSaldoDolares(double saldoInicial, List<Nodo> nodos) {
        List<Nodo> cobros = new ArrayList<>();
        List<Nodo> pagos = new ArrayList<>();

        for (Nodo nodo : nodos) {
            if (nodo.getTransaction() > 0) {
                cobros.add(nodo);
            } else {
                pagos.add(nodo);
            }
        }

        Collections.sort(cobros, Comparator.comparingDouble(Nodo::getTransaction).reversed()
                .thenComparingDouble(Nodo::getTasaCambio).reversed());

        Collections.sort(pagos, Comparator.comparingDouble(Nodo::getTasaCambio));

        double saldoCripto = saldoInicial;
        double saldoDolares = 0.0;

        for (Nodo cobro : cobros) {
            saldoCripto += cobro.getTransaction();
            saldoDolares += cobro.getTransaction() * cobro.getTasaCambio();
        }

        for (Nodo pago : pagos) {
            double montoPago = -pago.getTransaction();
            if (saldoCripto >= montoPago) {
                saldoCripto += pago.getTransaction();
                saldoDolares += pago.getTransaction() * pago.getTasaCambio();
            }
        }

        return saldoDolares;
    }
}

class Nodo {
    private double transaction;
    private double tasaCambio;

    public Nodo(double transaction, double tasaCambio) {
        this.transaction = transaction;
        this.tasaCambio = tasaCambio;
    }

    public double getTransaction() {
        return transaction;
    }

    public double getTasaCambio() {
        return tasaCambio;
    }
}